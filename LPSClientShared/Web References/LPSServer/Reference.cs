// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace LPSClientShared.LPSServer {
    
    
    /// <remarks/>
    /// <remarks>
///LPSoft server
///</remarks>
    [System.Web.Services.WebServiceBinding(Name="ServerSoap", Namespace="http://lpsoft.org/server/")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Server : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback PingOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLoggedUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteNonquerySimpleOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteNonqueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteScalarSimpleOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteScalarOperationCompleted;
        
        private System.Threading.SendOrPostCallback NextSeqValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataSetSimpleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveDataSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTextResourceOperationCompleted;
        
        public Server() {
            this.Url = "http://localhost:8080/Server.asmx";
        }
        
        public Server(string url) {
            this.Url = url;
        }
        
        public event PingCompletedEventHandler PingCompleted;
        
        public event LoginCompletedEventHandler LoginCompleted;
        
        public event GetLoggedUserCompletedEventHandler GetLoggedUserCompleted;
        
        public event ChangePasswordCompletedEventHandler ChangePasswordCompleted;
        
        public event LogoutCompletedEventHandler LogoutCompleted;
        
        public event ExecuteNonquerySimpleCompletedEventHandler ExecuteNonquerySimpleCompleted;
        
        public event ExecuteNonqueryCompletedEventHandler ExecuteNonqueryCompleted;
        
        public event ExecuteScalarSimpleCompletedEventHandler ExecuteScalarSimpleCompleted;
        
        public event ExecuteScalarCompletedEventHandler ExecuteScalarCompleted;
        
        public event NextSeqValueCompletedEventHandler NextSeqValueCompleted;
        
        public event GetDataSetSimpleCompletedEventHandler GetDataSetSimpleCompleted;
        
        public event GetDataSetCompletedEventHandler GetDataSetCompleted;
        
        public event SaveDataSetCompletedEventHandler SaveDataSetCompleted;
        
        public event GetTextResourceCompletedEventHandler GetTextResourceCompleted;
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/Ping", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string Ping(string data) {
            object[] results = this.Invoke("Ping", new object[] {
                        data});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginPing(string data, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Ping", new object[] {
                        data}, callback, asyncState);
        }
        
        public string EndPing(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void PingAsync(string data) {
            this.PingAsync(data, null);
        }
        
        public void PingAsync(string data, object userState) {
            if ((this.PingOperationCompleted == null)) {
                this.PingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPingCompleted);
            }
            this.InvokeAsync("Ping", new object[] {
                        data}, this.PingOperationCompleted, userState);
        }
        
        private void OnPingCompleted(object arg) {
            if ((this.PingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PingCompleted(this, new PingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/Login", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public long Login(string login, string password) {
            object[] results = this.Invoke("Login", new object[] {
                        login,
                        password});
            return ((long)(results[0]));
        }
        
        public System.IAsyncResult BeginLogin(string login, string password, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Login", new object[] {
                        login,
                        password}, callback, asyncState);
        }
        
        public long EndLogin(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((long)(results[0]));
        }
        
        public void LoginAsync(string login, string password) {
            this.LoginAsync(login, password, null);
        }
        
        public void LoginAsync(string login, string password, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        login,
                        password}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/GetLoggedUser", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string GetLoggedUser() {
            object[] results = this.Invoke("GetLoggedUser", new object[0]);
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginGetLoggedUser(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLoggedUser", new object[0], callback, asyncState);
        }
        
        public string EndGetLoggedUser(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void GetLoggedUserAsync() {
            this.GetLoggedUserAsync(null);
        }
        
        public void GetLoggedUserAsync(object userState) {
            if ((this.GetLoggedUserOperationCompleted == null)) {
                this.GetLoggedUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLoggedUserCompleted);
            }
            this.InvokeAsync("GetLoggedUser", new object[0], this.GetLoggedUserOperationCompleted, userState);
        }
        
        private void OnGetLoggedUserCompleted(object arg) {
            if ((this.GetLoggedUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLoggedUserCompleted(this, new GetLoggedUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/ChangePassword", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public bool ChangePassword(string old_password, string new_password) {
            object[] results = this.Invoke("ChangePassword", new object[] {
                        old_password,
                        new_password});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginChangePassword(string old_password, string new_password, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ChangePassword", new object[] {
                        old_password,
                        new_password}, callback, asyncState);
        }
        
        public bool EndChangePassword(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void ChangePasswordAsync(string old_password, string new_password) {
            this.ChangePasswordAsync(old_password, new_password, null);
        }
        
        public void ChangePasswordAsync(string old_password, string new_password, object userState) {
            if ((this.ChangePasswordOperationCompleted == null)) {
                this.ChangePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordCompleted);
            }
            this.InvokeAsync("ChangePassword", new object[] {
                        old_password,
                        new_password}, this.ChangePasswordOperationCompleted, userState);
        }
        
        private void OnChangePasswordCompleted(object arg) {
            if ((this.ChangePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePasswordCompleted(this, new ChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/Logout", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public void Logout() {
            this.Invoke("Logout", new object[0]);
        }
        
        public System.IAsyncResult BeginLogout(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Logout", new object[0], callback, asyncState);
        }
        
        public void EndLogout(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        public void LogoutAsync() {
            this.LogoutAsync(null);
        }
        
        public void LogoutAsync(object userState) {
            if ((this.LogoutOperationCompleted == null)) {
                this.LogoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogoutCompleted);
            }
            this.InvokeAsync("Logout", new object[0], this.LogoutOperationCompleted, userState);
        }
        
        private void OnLogoutCompleted(object arg) {
            if ((this.LogoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogoutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/ExecuteNonquerySimple", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public int ExecuteNonquerySimple(string sql) {
            object[] results = this.Invoke("ExecuteNonquerySimple", new object[] {
                        sql});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BeginExecuteNonquerySimple(string sql, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteNonquerySimple", new object[] {
                        sql}, callback, asyncState);
        }
        
        public int EndExecuteNonquerySimple(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void ExecuteNonquerySimpleAsync(string sql) {
            this.ExecuteNonquerySimpleAsync(sql, null);
        }
        
        public void ExecuteNonquerySimpleAsync(string sql, object userState) {
            if ((this.ExecuteNonquerySimpleOperationCompleted == null)) {
                this.ExecuteNonquerySimpleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteNonquerySimpleCompleted);
            }
            this.InvokeAsync("ExecuteNonquerySimple", new object[] {
                        sql}, this.ExecuteNonquerySimpleOperationCompleted, userState);
        }
        
        private void OnExecuteNonquerySimpleCompleted(object arg) {
            if ((this.ExecuteNonquerySimpleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteNonquerySimpleCompleted(this, new ExecuteNonquerySimpleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/ExecuteNonquery", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public int ExecuteNonquery(string sql, object[] parameters) {
            object[] results = this.Invoke("ExecuteNonquery", new object[] {
                        sql,
                        parameters});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BeginExecuteNonquery(string sql, object[] parameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteNonquery", new object[] {
                        sql,
                        parameters}, callback, asyncState);
        }
        
        public int EndExecuteNonquery(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void ExecuteNonqueryAsync(string sql, object[] parameters) {
            this.ExecuteNonqueryAsync(sql, parameters, null);
        }
        
        public void ExecuteNonqueryAsync(string sql, object[] parameters, object userState) {
            if ((this.ExecuteNonqueryOperationCompleted == null)) {
                this.ExecuteNonqueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteNonqueryCompleted);
            }
            this.InvokeAsync("ExecuteNonquery", new object[] {
                        sql,
                        parameters}, this.ExecuteNonqueryOperationCompleted, userState);
        }
        
        private void OnExecuteNonqueryCompleted(object arg) {
            if ((this.ExecuteNonqueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteNonqueryCompleted(this, new ExecuteNonqueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/ExecuteScalarSimple", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public object ExecuteScalarSimple(string sql) {
            object[] results = this.Invoke("ExecuteScalarSimple", new object[] {
                        sql});
            return ((object)(results[0]));
        }
        
        public System.IAsyncResult BeginExecuteScalarSimple(string sql, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteScalarSimple", new object[] {
                        sql}, callback, asyncState);
        }
        
        public object EndExecuteScalarSimple(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((object)(results[0]));
        }
        
        public void ExecuteScalarSimpleAsync(string sql) {
            this.ExecuteScalarSimpleAsync(sql, null);
        }
        
        public void ExecuteScalarSimpleAsync(string sql, object userState) {
            if ((this.ExecuteScalarSimpleOperationCompleted == null)) {
                this.ExecuteScalarSimpleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteScalarSimpleCompleted);
            }
            this.InvokeAsync("ExecuteScalarSimple", new object[] {
                        sql}, this.ExecuteScalarSimpleOperationCompleted, userState);
        }
        
        private void OnExecuteScalarSimpleCompleted(object arg) {
            if ((this.ExecuteScalarSimpleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteScalarSimpleCompleted(this, new ExecuteScalarSimpleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/ExecuteScalar", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public object ExecuteScalar(string sql, object[] parameters) {
            object[] results = this.Invoke("ExecuteScalar", new object[] {
                        sql,
                        parameters});
            return ((object)(results[0]));
        }
        
        public System.IAsyncResult BeginExecuteScalar(string sql, object[] parameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteScalar", new object[] {
                        sql,
                        parameters}, callback, asyncState);
        }
        
        public object EndExecuteScalar(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((object)(results[0]));
        }
        
        public void ExecuteScalarAsync(string sql, object[] parameters) {
            this.ExecuteScalarAsync(sql, parameters, null);
        }
        
        public void ExecuteScalarAsync(string sql, object[] parameters, object userState) {
            if ((this.ExecuteScalarOperationCompleted == null)) {
                this.ExecuteScalarOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteScalarCompleted);
            }
            this.InvokeAsync("ExecuteScalar", new object[] {
                        sql,
                        parameters}, this.ExecuteScalarOperationCompleted, userState);
        }
        
        private void OnExecuteScalarCompleted(object arg) {
            if ((this.ExecuteScalarCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteScalarCompleted(this, new ExecuteScalarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/NextSeqValue", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public long NextSeqValue(string generator) {
            object[] results = this.Invoke("NextSeqValue", new object[] {
                        generator});
            return ((long)(results[0]));
        }
        
        public System.IAsyncResult BeginNextSeqValue(string generator, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("NextSeqValue", new object[] {
                        generator}, callback, asyncState);
        }
        
        public long EndNextSeqValue(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((long)(results[0]));
        }
        
        public void NextSeqValueAsync(string generator) {
            this.NextSeqValueAsync(generator, null);
        }
        
        public void NextSeqValueAsync(string generator, object userState) {
            if ((this.NextSeqValueOperationCompleted == null)) {
                this.NextSeqValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNextSeqValueCompleted);
            }
            this.InvokeAsync("NextSeqValue", new object[] {
                        generator}, this.NextSeqValueOperationCompleted, userState);
        }
        
        private void OnNextSeqValueCompleted(object arg) {
            if ((this.NextSeqValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NextSeqValueCompleted(this, new NextSeqValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/GetDataSetSimple", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public System.Data.DataSet GetDataSetSimple(string sql) {
            object[] results = this.Invoke("GetDataSetSimple", new object[] {
                        sql});
            return ((System.Data.DataSet)(results[0]));
        }
        
        public System.IAsyncResult BeginGetDataSetSimple(string sql, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDataSetSimple", new object[] {
                        sql}, callback, asyncState);
        }
        
        public System.Data.DataSet EndGetDataSetSimple(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        public void GetDataSetSimpleAsync(string sql) {
            this.GetDataSetSimpleAsync(sql, null);
        }
        
        public void GetDataSetSimpleAsync(string sql, object userState) {
            if ((this.GetDataSetSimpleOperationCompleted == null)) {
                this.GetDataSetSimpleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataSetSimpleCompleted);
            }
            this.InvokeAsync("GetDataSetSimple", new object[] {
                        sql}, this.GetDataSetSimpleOperationCompleted, userState);
        }
        
        private void OnGetDataSetSimpleCompleted(object arg) {
            if ((this.GetDataSetSimpleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataSetSimpleCompleted(this, new GetDataSetSimpleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/GetDataSet", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public System.Data.DataSet GetDataSet(string sql, object[] parameters) {
            object[] results = this.Invoke("GetDataSet", new object[] {
                        sql,
                        parameters});
            return ((System.Data.DataSet)(results[0]));
        }
        
        public System.IAsyncResult BeginGetDataSet(string sql, object[] parameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDataSet", new object[] {
                        sql,
                        parameters}, callback, asyncState);
        }
        
        public System.Data.DataSet EndGetDataSet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        public void GetDataSetAsync(string sql, object[] parameters) {
            this.GetDataSetAsync(sql, parameters, null);
        }
        
        public void GetDataSetAsync(string sql, object[] parameters, object userState) {
            if ((this.GetDataSetOperationCompleted == null)) {
                this.GetDataSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataSetCompleted);
            }
            this.InvokeAsync("GetDataSet", new object[] {
                        sql,
                        parameters}, this.GetDataSetOperationCompleted, userState);
        }
        
        private void OnGetDataSetCompleted(object arg) {
            if ((this.GetDataSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataSetCompleted(this, new GetDataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/SaveDataSet", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public int SaveDataSet(System.Data.DataSet changes, bool updateUserInfo, string selectSql, object[] parameters) {
            object[] results = this.Invoke("SaveDataSet", new object[] {
                        changes,
                        updateUserInfo,
                        selectSql,
                        parameters});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BeginSaveDataSet(System.Data.DataSet changes, bool updateUserInfo, string selectSql, object[] parameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveDataSet", new object[] {
                        changes,
                        updateUserInfo,
                        selectSql,
                        parameters}, callback, asyncState);
        }
        
        public int EndSaveDataSet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void SaveDataSetAsync(System.Data.DataSet changes, bool updateUserInfo, string selectSql, object[] parameters) {
            this.SaveDataSetAsync(changes, updateUserInfo, selectSql, parameters, null);
        }
        
        public void SaveDataSetAsync(System.Data.DataSet changes, bool updateUserInfo, string selectSql, object[] parameters, object userState) {
            if ((this.SaveDataSetOperationCompleted == null)) {
                this.SaveDataSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveDataSetCompleted);
            }
            this.InvokeAsync("SaveDataSet", new object[] {
                        changes,
                        updateUserInfo,
                        selectSql,
                        parameters}, this.SaveDataSetOperationCompleted, userState);
        }
        
        private void OnSaveDataSetCompleted(object arg) {
            if ((this.SaveDataSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveDataSetCompleted(this, new SaveDataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/GetTextResource", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string GetTextResource(string path) {
            object[] results = this.Invoke("GetTextResource", new object[] {
                        path});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginGetTextResource(string path, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTextResource", new object[] {
                        path}, callback, asyncState);
        }
        
        public string EndGetTextResource(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void GetTextResourceAsync(string path) {
            this.GetTextResourceAsync(path, null);
        }
        
        public void GetTextResourceAsync(string path, object userState) {
            if ((this.GetTextResourceOperationCompleted == null)) {
                this.GetTextResourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTextResourceCompleted);
            }
            this.InvokeAsync("GetTextResource", new object[] {
                        path}, this.GetTextResourceOperationCompleted, userState);
        }
        
        private void OnGetTextResourceCompleted(object arg) {
            if ((this.GetTextResourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTextResourceCompleted(this, new GetTextResourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    }
    
    public partial class PingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void PingCompletedEventHandler(object sender, PingCompletedEventArgs args);
    
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs args);
    
    public partial class GetLoggedUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLoggedUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void GetLoggedUserCompletedEventHandler(object sender, GetLoggedUserCompletedEventArgs args);
    
    public partial class ChangePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void ChangePasswordCompletedEventHandler(object sender, ChangePasswordCompletedEventArgs args);
    
    public delegate void LogoutCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);
    
    public partial class ExecuteNonquerySimpleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteNonquerySimpleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void ExecuteNonquerySimpleCompletedEventHandler(object sender, ExecuteNonquerySimpleCompletedEventArgs args);
    
    public partial class ExecuteNonqueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteNonqueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void ExecuteNonqueryCompletedEventHandler(object sender, ExecuteNonqueryCompletedEventArgs args);
    
    public partial class ExecuteScalarSimpleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteScalarSimpleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    public delegate void ExecuteScalarSimpleCompletedEventHandler(object sender, ExecuteScalarSimpleCompletedEventArgs args);
    
    public partial class ExecuteScalarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteScalarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    public delegate void ExecuteScalarCompletedEventHandler(object sender, ExecuteScalarCompletedEventArgs args);
    
    public partial class NextSeqValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NextSeqValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    public delegate void NextSeqValueCompletedEventHandler(object sender, NextSeqValueCompletedEventArgs args);
    
    public partial class GetDataSetSimpleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataSetSimpleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    public delegate void GetDataSetSimpleCompletedEventHandler(object sender, GetDataSetSimpleCompletedEventArgs args);
    
    public partial class GetDataSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    public delegate void GetDataSetCompletedEventHandler(object sender, GetDataSetCompletedEventArgs args);
    
    public partial class SaveDataSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveDataSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void SaveDataSetCompletedEventHandler(object sender, SaveDataSetCompletedEventArgs args);
    
    public partial class GetTextResourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTextResourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void GetTextResourceCompletedEventHandler(object sender, GetTextResourceCompletedEventArgs args);
}
