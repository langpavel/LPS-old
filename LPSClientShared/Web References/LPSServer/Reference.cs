// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace LPSClientShared.LPSServer {
    
    
    /// <remarks/>
    /// <remarks>
///LPSoft server
///</remarks>
    [System.Web.Services.WebServiceBinding(Name="ServerSoap", Namespace="http://lpsoft.org/server/")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ChangeInfo))]
    public partial class Server : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback PingOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLoggedUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback SimpleExecuteNonqueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback SimpleExecuteScalarOperationCompleted;
        
        private System.Threading.SendOrPostCallback NextSeqValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGeneratorValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataSetSimpleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataSetByNameSimpleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetChangesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteNonqueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteScalarOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataSetBySqlOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveDataSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterListenerOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnregisterListenerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataSetByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTextResourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogoutOperationCompleted;
        
        public Server() {
            this.Url = "http://localhost/LPS/Server.asmx";
        }
        
        public Server(string url) {
            this.Url = url;
        }
        
        public event PingCompletedEventHandler PingCompleted;
        
        public event LoginCompletedEventHandler LoginCompleted;
        
        public event GetLoggedUserCompletedEventHandler GetLoggedUserCompleted;
        
        public event ChangePasswordCompletedEventHandler ChangePasswordCompleted;
        
        public event SimpleExecuteNonqueryCompletedEventHandler SimpleExecuteNonqueryCompleted;
        
        public event SimpleExecuteScalarCompletedEventHandler SimpleExecuteScalarCompleted;
        
        public event NextSeqValueCompletedEventHandler NextSeqValueCompleted;
        
        public event GetGeneratorValueCompletedEventHandler GetGeneratorValueCompleted;
        
        public event GetDataSetSimpleCompletedEventHandler GetDataSetSimpleCompleted;
        
        public event GetDataSetByNameSimpleCompletedEventHandler GetDataSetByNameSimpleCompleted;
        
        public event GetChangesCompletedEventHandler GetChangesCompleted;
        
        public event ExecuteNonqueryCompletedEventHandler ExecuteNonqueryCompleted;
        
        public event ExecuteScalarCompletedEventHandler ExecuteScalarCompleted;
        
        public event GetDataSetBySqlCompletedEventHandler GetDataSetBySqlCompleted;
        
        public event SaveDataSetCompletedEventHandler SaveDataSetCompleted;
        
        public event RegisterListenerCompletedEventHandler RegisterListenerCompleted;
        
        public event UnregisterListenerCompletedEventHandler UnregisterListenerCompleted;
        
        public event GetDataSetByNameCompletedEventHandler GetDataSetByNameCompleted;
        
        public event GetTextResourceCompletedEventHandler GetTextResourceCompleted;
        
        public event LogoutCompletedEventHandler LogoutCompleted;
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/Ping", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public bool Ping() {
            object[] results = this.Invoke("Ping", new object[0]);
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginPing(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Ping", new object[0], callback, asyncState);
        }
        
        public bool EndPing(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void PingAsync() {
            this.PingAsync(null);
        }
        
        public void PingAsync(object userState) {
            if ((this.PingOperationCompleted == null)) {
                this.PingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPingCompleted);
            }
            this.InvokeAsync("Ping", new object[0], this.PingOperationCompleted, userState);
        }
        
        private void OnPingCompleted(object arg) {
            if ((this.PingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PingCompleted(this, new PingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/Login", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public long Login(string login, string password) {
            object[] results = this.Invoke("Login", new object[] {
                        login,
                        password});
            return ((long)(results[0]));
        }
        
        public System.IAsyncResult BeginLogin(string login, string password, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Login", new object[] {
                        login,
                        password}, callback, asyncState);
        }
        
        public long EndLogin(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((long)(results[0]));
        }
        
        public void LoginAsync(string login, string password) {
            this.LoginAsync(login, password, null);
        }
        
        public void LoginAsync(string login, string password, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        login,
                        password}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/GetLoggedUser", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string GetLoggedUser() {
            object[] results = this.Invoke("GetLoggedUser", new object[0]);
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginGetLoggedUser(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLoggedUser", new object[0], callback, asyncState);
        }
        
        public string EndGetLoggedUser(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void GetLoggedUserAsync() {
            this.GetLoggedUserAsync(null);
        }
        
        public void GetLoggedUserAsync(object userState) {
            if ((this.GetLoggedUserOperationCompleted == null)) {
                this.GetLoggedUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLoggedUserCompleted);
            }
            this.InvokeAsync("GetLoggedUser", new object[0], this.GetLoggedUserOperationCompleted, userState);
        }
        
        private void OnGetLoggedUserCompleted(object arg) {
            if ((this.GetLoggedUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLoggedUserCompleted(this, new GetLoggedUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/ChangePassword", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public bool ChangePassword(string old_password, string new_password) {
            object[] results = this.Invoke("ChangePassword", new object[] {
                        old_password,
                        new_password});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginChangePassword(string old_password, string new_password, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ChangePassword", new object[] {
                        old_password,
                        new_password}, callback, asyncState);
        }
        
        public bool EndChangePassword(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void ChangePasswordAsync(string old_password, string new_password) {
            this.ChangePasswordAsync(old_password, new_password, null);
        }
        
        public void ChangePasswordAsync(string old_password, string new_password, object userState) {
            if ((this.ChangePasswordOperationCompleted == null)) {
                this.ChangePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordCompleted);
            }
            this.InvokeAsync("ChangePassword", new object[] {
                        old_password,
                        new_password}, this.ChangePasswordOperationCompleted, userState);
        }
        
        private void OnChangePasswordCompleted(object arg) {
            if ((this.ChangePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePasswordCompleted(this, new ChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/SimpleExecuteNonquery", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public int SimpleExecuteNonquery(string sql) {
            object[] results = this.Invoke("SimpleExecuteNonquery", new object[] {
                        sql});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BeginSimpleExecuteNonquery(string sql, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SimpleExecuteNonquery", new object[] {
                        sql}, callback, asyncState);
        }
        
        public int EndSimpleExecuteNonquery(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void SimpleExecuteNonqueryAsync(string sql) {
            this.SimpleExecuteNonqueryAsync(sql, null);
        }
        
        public void SimpleExecuteNonqueryAsync(string sql, object userState) {
            if ((this.SimpleExecuteNonqueryOperationCompleted == null)) {
                this.SimpleExecuteNonqueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSimpleExecuteNonqueryCompleted);
            }
            this.InvokeAsync("SimpleExecuteNonquery", new object[] {
                        sql}, this.SimpleExecuteNonqueryOperationCompleted, userState);
        }
        
        private void OnSimpleExecuteNonqueryCompleted(object arg) {
            if ((this.SimpleExecuteNonqueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SimpleExecuteNonqueryCompleted(this, new SimpleExecuteNonqueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/SimpleExecuteScalar", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public object SimpleExecuteScalar(string sql) {
            object[] results = this.Invoke("SimpleExecuteScalar", new object[] {
                        sql});
            return ((object)(results[0]));
        }
        
        public System.IAsyncResult BeginSimpleExecuteScalar(string sql, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SimpleExecuteScalar", new object[] {
                        sql}, callback, asyncState);
        }
        
        public object EndSimpleExecuteScalar(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((object)(results[0]));
        }
        
        public void SimpleExecuteScalarAsync(string sql) {
            this.SimpleExecuteScalarAsync(sql, null);
        }
        
        public void SimpleExecuteScalarAsync(string sql, object userState) {
            if ((this.SimpleExecuteScalarOperationCompleted == null)) {
                this.SimpleExecuteScalarOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSimpleExecuteScalarCompleted);
            }
            this.InvokeAsync("SimpleExecuteScalar", new object[] {
                        sql}, this.SimpleExecuteScalarOperationCompleted, userState);
        }
        
        private void OnSimpleExecuteScalarCompleted(object arg) {
            if ((this.SimpleExecuteScalarCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SimpleExecuteScalarCompleted(this, new SimpleExecuteScalarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/NextSeqValue", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public long NextSeqValue(string generator) {
            object[] results = this.Invoke("NextSeqValue", new object[] {
                        generator});
            return ((long)(results[0]));
        }
        
        public System.IAsyncResult BeginNextSeqValue(string generator, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("NextSeqValue", new object[] {
                        generator}, callback, asyncState);
        }
        
        public long EndNextSeqValue(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((long)(results[0]));
        }
        
        public void NextSeqValueAsync(string generator) {
            this.NextSeqValueAsync(generator, null);
        }
        
        public void NextSeqValueAsync(string generator, object userState) {
            if ((this.NextSeqValueOperationCompleted == null)) {
                this.NextSeqValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNextSeqValueCompleted);
            }
            this.InvokeAsync("NextSeqValue", new object[] {
                        generator}, this.NextSeqValueOperationCompleted, userState);
        }
        
        private void OnNextSeqValueCompleted(object arg) {
            if ((this.NextSeqValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NextSeqValueCompleted(this, new NextSeqValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/GetGeneratorValue", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string GetGeneratorValue(string generator, System.DateTime sys_date) {
            object[] results = this.Invoke("GetGeneratorValue", new object[] {
                        generator,
                        sys_date});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginGetGeneratorValue(string generator, System.DateTime sys_date, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetGeneratorValue", new object[] {
                        generator,
                        sys_date}, callback, asyncState);
        }
        
        public string EndGetGeneratorValue(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void GetGeneratorValueAsync(string generator, System.DateTime sys_date) {
            this.GetGeneratorValueAsync(generator, sys_date, null);
        }
        
        public void GetGeneratorValueAsync(string generator, System.DateTime sys_date, object userState) {
            if ((this.GetGeneratorValueOperationCompleted == null)) {
                this.GetGeneratorValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGeneratorValueCompleted);
            }
            this.InvokeAsync("GetGeneratorValue", new object[] {
                        generator,
                        sys_date}, this.GetGeneratorValueOperationCompleted, userState);
        }
        
        private void OnGetGeneratorValueCompleted(object arg) {
            if ((this.GetGeneratorValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGeneratorValueCompleted(this, new GetGeneratorValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/GetDataSetSimple", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public System.Data.DataSet GetDataSetSimple(string sql) {
            object[] results = this.Invoke("GetDataSetSimple", new object[] {
                        sql});
            return ((System.Data.DataSet)(results[0]));
        }
        
        public System.IAsyncResult BeginGetDataSetSimple(string sql, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDataSetSimple", new object[] {
                        sql}, callback, asyncState);
        }
        
        public System.Data.DataSet EndGetDataSetSimple(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        public void GetDataSetSimpleAsync(string sql) {
            this.GetDataSetSimpleAsync(sql, null);
        }
        
        public void GetDataSetSimpleAsync(string sql, object userState) {
            if ((this.GetDataSetSimpleOperationCompleted == null)) {
                this.GetDataSetSimpleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataSetSimpleCompleted);
            }
            this.InvokeAsync("GetDataSetSimple", new object[] {
                        sql}, this.GetDataSetSimpleOperationCompleted, userState);
        }
        
        private void OnGetDataSetSimpleCompleted(object arg) {
            if ((this.GetDataSetSimpleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataSetSimpleCompleted(this, new GetDataSetSimpleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/GetDataSetByNameSimple", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public System.Data.DataSet GetDataSetByNameSimple(string name, string addsql) {
            object[] results = this.Invoke("GetDataSetByNameSimple", new object[] {
                        name,
                        addsql});
            return ((System.Data.DataSet)(results[0]));
        }
        
        public System.IAsyncResult BeginGetDataSetByNameSimple(string name, string addsql, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDataSetByNameSimple", new object[] {
                        name,
                        addsql}, callback, asyncState);
        }
        
        public System.Data.DataSet EndGetDataSetByNameSimple(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        public void GetDataSetByNameSimpleAsync(string name, string addsql) {
            this.GetDataSetByNameSimpleAsync(name, addsql, null);
        }
        
        public void GetDataSetByNameSimpleAsync(string name, string addsql, object userState) {
            if ((this.GetDataSetByNameSimpleOperationCompleted == null)) {
                this.GetDataSetByNameSimpleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataSetByNameSimpleCompleted);
            }
            this.InvokeAsync("GetDataSetByNameSimple", new object[] {
                        name,
                        addsql}, this.GetDataSetByNameSimpleOperationCompleted, userState);
        }
        
        private void OnGetDataSetByNameSimpleCompleted(object arg) {
            if ((this.GetDataSetByNameSimpleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataSetByNameSimpleCompleted(this, new GetDataSetByNameSimpleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/GetChanges", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public ServerCallResult GetChanges(int sink, int security) {
            object[] results = this.Invoke("GetChanges", new object[] {
                        sink,
                        security});
            return ((ServerCallResult)(results[0]));
        }
        
        public System.IAsyncResult BeginGetChanges(int sink, int security, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetChanges", new object[] {
                        sink,
                        security}, callback, asyncState);
        }
        
        public ServerCallResult EndGetChanges(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ServerCallResult)(results[0]));
        }
        
        public void GetChangesAsync(int sink, int security) {
            this.GetChangesAsync(sink, security, null);
        }
        
        public void GetChangesAsync(int sink, int security, object userState) {
            if ((this.GetChangesOperationCompleted == null)) {
                this.GetChangesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChangesCompleted);
            }
            this.InvokeAsync("GetChanges", new object[] {
                        sink,
                        security}, this.GetChangesOperationCompleted, userState);
        }
        
        private void OnGetChangesCompleted(object arg) {
            if ((this.GetChangesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChangesCompleted(this, new GetChangesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/ExecuteNonquery", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public ServerCallResult ExecuteNonquery(int sink, int security, string sql, object[] parameters, out int affected) {
            object[] results = this.Invoke("ExecuteNonquery", new object[] {
                        sink,
                        security,
                        sql,
                        parameters});
            affected = ((int)(results[1]));
            return ((ServerCallResult)(results[0]));
        }
        
        public System.IAsyncResult BeginExecuteNonquery(int sink, int security, string sql, object[] parameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteNonquery", new object[] {
                        sink,
                        security,
                        sql,
                        parameters}, callback, asyncState);
        }
        
        public ServerCallResult EndExecuteNonquery(System.IAsyncResult asyncResult, out int affected) {
            object[] results = this.EndInvoke(asyncResult);
            affected = ((int)(results[1]));
            return ((ServerCallResult)(results[0]));
        }
        
        public void ExecuteNonqueryAsync(int sink, int security, string sql, object[] parameters) {
            this.ExecuteNonqueryAsync(sink, security, sql, parameters, null);
        }
        
        public void ExecuteNonqueryAsync(int sink, int security, string sql, object[] parameters, object userState) {
            if ((this.ExecuteNonqueryOperationCompleted == null)) {
                this.ExecuteNonqueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteNonqueryCompleted);
            }
            this.InvokeAsync("ExecuteNonquery", new object[] {
                        sink,
                        security,
                        sql,
                        parameters}, this.ExecuteNonqueryOperationCompleted, userState);
        }
        
        private void OnExecuteNonqueryCompleted(object arg) {
            if ((this.ExecuteNonqueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteNonqueryCompleted(this, new ExecuteNonqueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/ExecuteScalar", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public ServerCallResult ExecuteScalar(int sink, int security, string sql, object[] parameters, out object result) {
            object[] results = this.Invoke("ExecuteScalar", new object[] {
                        sink,
                        security,
                        sql,
                        parameters});
            result = ((object)(results[1]));
            return ((ServerCallResult)(results[0]));
        }
        
        public System.IAsyncResult BeginExecuteScalar(int sink, int security, string sql, object[] parameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteScalar", new object[] {
                        sink,
                        security,
                        sql,
                        parameters}, callback, asyncState);
        }
        
        public ServerCallResult EndExecuteScalar(System.IAsyncResult asyncResult, out object result) {
            object[] results = this.EndInvoke(asyncResult);
            result = ((object)(results[1]));
            return ((ServerCallResult)(results[0]));
        }
        
        public void ExecuteScalarAsync(int sink, int security, string sql, object[] parameters) {
            this.ExecuteScalarAsync(sink, security, sql, parameters, null);
        }
        
        public void ExecuteScalarAsync(int sink, int security, string sql, object[] parameters, object userState) {
            if ((this.ExecuteScalarOperationCompleted == null)) {
                this.ExecuteScalarOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteScalarCompleted);
            }
            this.InvokeAsync("ExecuteScalar", new object[] {
                        sink,
                        security,
                        sql,
                        parameters}, this.ExecuteScalarOperationCompleted, userState);
        }
        
        private void OnExecuteScalarCompleted(object arg) {
            if ((this.ExecuteScalarCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteScalarCompleted(this, new ExecuteScalarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/GetDataSetBySql", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public ServerCallResult GetDataSetBySql(int sink, int security, string sql, object[] parameters, out System.Data.DataSet data) {
            object[] results = this.Invoke("GetDataSetBySql", new object[] {
                        sink,
                        security,
                        sql,
                        parameters});
            data = ((System.Data.DataSet)(results[1]));
            return ((ServerCallResult)(results[0]));
        }
        
        public System.IAsyncResult BeginGetDataSetBySql(int sink, int security, string sql, object[] parameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDataSetBySql", new object[] {
                        sink,
                        security,
                        sql,
                        parameters}, callback, asyncState);
        }
        
        public ServerCallResult EndGetDataSetBySql(System.IAsyncResult asyncResult, out System.Data.DataSet data) {
            object[] results = this.EndInvoke(asyncResult);
            data = ((System.Data.DataSet)(results[1]));
            return ((ServerCallResult)(results[0]));
        }
        
        public void GetDataSetBySqlAsync(int sink, int security, string sql, object[] parameters) {
            this.GetDataSetBySqlAsync(sink, security, sql, parameters, null);
        }
        
        public void GetDataSetBySqlAsync(int sink, int security, string sql, object[] parameters, object userState) {
            if ((this.GetDataSetBySqlOperationCompleted == null)) {
                this.GetDataSetBySqlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataSetBySqlCompleted);
            }
            this.InvokeAsync("GetDataSetBySql", new object[] {
                        sink,
                        security,
                        sql,
                        parameters}, this.GetDataSetBySqlOperationCompleted, userState);
        }
        
        private void OnGetDataSetBySqlCompleted(object arg) {
            if ((this.GetDataSetBySqlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataSetBySqlCompleted(this, new GetDataSetBySqlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/SaveDataSet", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public ServerCallResult SaveDataSet(int sink, int security, string table_name, System.Data.DataSet changes, bool updateUserInfo, bool changesNotify, out int affected) {
            object[] results = this.Invoke("SaveDataSet", new object[] {
                        sink,
                        security,
                        table_name,
                        changes,
                        updateUserInfo,
                        changesNotify});
            affected = ((int)(results[1]));
            return ((ServerCallResult)(results[0]));
        }
        
        public System.IAsyncResult BeginSaveDataSet(int sink, int security, string table_name, System.Data.DataSet changes, bool updateUserInfo, bool changesNotify, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveDataSet", new object[] {
                        sink,
                        security,
                        table_name,
                        changes,
                        updateUserInfo,
                        changesNotify}, callback, asyncState);
        }
        
        public ServerCallResult EndSaveDataSet(System.IAsyncResult asyncResult, out int affected) {
            object[] results = this.EndInvoke(asyncResult);
            affected = ((int)(results[1]));
            return ((ServerCallResult)(results[0]));
        }
        
        public void SaveDataSetAsync(int sink, int security, string table_name, System.Data.DataSet changes, bool updateUserInfo, bool changesNotify) {
            this.SaveDataSetAsync(sink, security, table_name, changes, updateUserInfo, changesNotify, null);
        }
        
        public void SaveDataSetAsync(int sink, int security, string table_name, System.Data.DataSet changes, bool updateUserInfo, bool changesNotify, object userState) {
            if ((this.SaveDataSetOperationCompleted == null)) {
                this.SaveDataSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveDataSetCompleted);
            }
            this.InvokeAsync("SaveDataSet", new object[] {
                        sink,
                        security,
                        table_name,
                        changes,
                        updateUserInfo,
                        changesNotify}, this.SaveDataSetOperationCompleted, userState);
        }
        
        private void OnSaveDataSetCompleted(object arg) {
            if ((this.SaveDataSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveDataSetCompleted(this, new SaveDataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/RegisterListener", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public ServerCallResult RegisterListener(out int sink, out int security) {
            object[] results = this.Invoke("RegisterListener", new object[0]);
            security = ((int)(results[2]));
            sink = ((int)(results[1]));
            return ((ServerCallResult)(results[0]));
        }
        
        public System.IAsyncResult BeginRegisterListener(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RegisterListener", new object[0], callback, asyncState);
        }
        
        public ServerCallResult EndRegisterListener(System.IAsyncResult asyncResult, out int sink, out int security) {
            object[] results = this.EndInvoke(asyncResult);
            security = ((int)(results[2]));
            sink = ((int)(results[1]));
            return ((ServerCallResult)(results[0]));
        }
        
        public void RegisterListenerAsync() {
            this.RegisterListenerAsync(null);
        }
        
        public void RegisterListenerAsync(object userState) {
            if ((this.RegisterListenerOperationCompleted == null)) {
                this.RegisterListenerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterListenerCompleted);
            }
            this.InvokeAsync("RegisterListener", new object[0], this.RegisterListenerOperationCompleted, userState);
        }
        
        private void OnRegisterListenerCompleted(object arg) {
            if ((this.RegisterListenerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterListenerCompleted(this, new RegisterListenerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/UnregisterListener", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public ServerCallResult UnregisterListener(int sink, int security) {
            object[] results = this.Invoke("UnregisterListener", new object[] {
                        sink,
                        security});
            return ((ServerCallResult)(results[0]));
        }
        
        public System.IAsyncResult BeginUnregisterListener(int sink, int security, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UnregisterListener", new object[] {
                        sink,
                        security}, callback, asyncState);
        }
        
        public ServerCallResult EndUnregisterListener(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ServerCallResult)(results[0]));
        }
        
        public void UnregisterListenerAsync(int sink, int security) {
            this.UnregisterListenerAsync(sink, security, null);
        }
        
        public void UnregisterListenerAsync(int sink, int security, object userState) {
            if ((this.UnregisterListenerOperationCompleted == null)) {
                this.UnregisterListenerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnregisterListenerCompleted);
            }
            this.InvokeAsync("UnregisterListener", new object[] {
                        sink,
                        security}, this.UnregisterListenerOperationCompleted, userState);
        }
        
        private void OnUnregisterListenerCompleted(object arg) {
            if ((this.UnregisterListenerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnregisterListenerCompleted(this, new UnregisterListenerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/GetDataSetByName", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public ServerCallResult GetDataSetByName(int sink, int security, string table, string addsql, object[] parameters, out System.Data.DataSet result) {
            object[] results = this.Invoke("GetDataSetByName", new object[] {
                        sink,
                        security,
                        table,
                        addsql,
                        parameters});
            result = ((System.Data.DataSet)(results[1]));
            return ((ServerCallResult)(results[0]));
        }
        
        public System.IAsyncResult BeginGetDataSetByName(int sink, int security, string table, string addsql, object[] parameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDataSetByName", new object[] {
                        sink,
                        security,
                        table,
                        addsql,
                        parameters}, callback, asyncState);
        }
        
        public ServerCallResult EndGetDataSetByName(System.IAsyncResult asyncResult, out System.Data.DataSet result) {
            object[] results = this.EndInvoke(asyncResult);
            result = ((System.Data.DataSet)(results[1]));
            return ((ServerCallResult)(results[0]));
        }
        
        public void GetDataSetByNameAsync(int sink, int security, string table, string addsql, object[] parameters) {
            this.GetDataSetByNameAsync(sink, security, table, addsql, parameters, null);
        }
        
        public void GetDataSetByNameAsync(int sink, int security, string table, string addsql, object[] parameters, object userState) {
            if ((this.GetDataSetByNameOperationCompleted == null)) {
                this.GetDataSetByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataSetByNameCompleted);
            }
            this.InvokeAsync("GetDataSetByName", new object[] {
                        sink,
                        security,
                        table,
                        addsql,
                        parameters}, this.GetDataSetByNameOperationCompleted, userState);
        }
        
        private void OnGetDataSetByNameCompleted(object arg) {
            if ((this.GetDataSetByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataSetByNameCompleted(this, new GetDataSetByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/GetTextResource", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string GetTextResource(string path) {
            object[] results = this.Invoke("GetTextResource", new object[] {
                        path});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginGetTextResource(string path, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTextResource", new object[] {
                        path}, callback, asyncState);
        }
        
        public string EndGetTextResource(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void GetTextResourceAsync(string path) {
            this.GetTextResourceAsync(path, null);
        }
        
        public void GetTextResourceAsync(string path, object userState) {
            if ((this.GetTextResourceOperationCompleted == null)) {
                this.GetTextResourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTextResourceCompleted);
            }
            this.InvokeAsync("GetTextResource", new object[] {
                        path}, this.GetTextResourceOperationCompleted, userState);
        }
        
        private void OnGetTextResourceCompleted(object arg) {
            if ((this.GetTextResourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTextResourceCompleted(this, new GetTextResourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/server/Logout", RequestNamespace="http://lpsoft.org/server/", ResponseNamespace="http://lpsoft.org/server/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public void Logout() {
            this.Invoke("Logout", new object[0]);
        }
        
        public System.IAsyncResult BeginLogout(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Logout", new object[0], callback, asyncState);
        }
        
        public void EndLogout(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        public void LogoutAsync() {
            this.LogoutAsync(null);
        }
        
        public void LogoutAsync(object userState) {
            if ((this.LogoutOperationCompleted == null)) {
                this.LogoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogoutCompleted);
            }
            this.InvokeAsync("Logout", new object[0], this.LogoutOperationCompleted, userState);
        }
        
        private void OnLogoutCompleted(object arg) {
            if ((this.LogoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogoutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://lpsoft.org/server/")]
    public partial class ExceptionInfo {
        
        /// <remarks/>
        public string Name;
        
        /// <remarks/>
        public string Message;
        
        /// <remarks/>
        public string StackTrace;
        
        /// <remarks/>
        public int ErrCode;
        
        /// <remarks/>
        public string ErrCodeName;
        
        /// <remarks/>
        public object[] Data;
        
        /// <remarks/>
        public ExceptionInfo InnerException;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://lpsoft.org/server/result/")]
    public partial class ChangeInfo {
        
        /// <remarks/>
        public string TableName;
        
        /// <remarks/>
        public System.DateTime ModifyDateTime;
        
        /// <remarks/>
        public bool HasDeletedRows;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://lpsoft.org/server/result/")]
    public partial class ServerCallResult {
        
        /// <remarks/>
        public ChangeInfo[] Changes;
        
        /// <remarks/>
        public System.DateTime DateTime;
        
        /// <remarks/>
        public ExceptionInfo Exception;
    }
    
    public partial class PingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void PingCompletedEventHandler(object sender, PingCompletedEventArgs args);
    
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs args);
    
    public partial class GetLoggedUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLoggedUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void GetLoggedUserCompletedEventHandler(object sender, GetLoggedUserCompletedEventArgs args);
    
    public partial class ChangePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void ChangePasswordCompletedEventHandler(object sender, ChangePasswordCompletedEventArgs args);
    
    public partial class SimpleExecuteNonqueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SimpleExecuteNonqueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void SimpleExecuteNonqueryCompletedEventHandler(object sender, SimpleExecuteNonqueryCompletedEventArgs args);
    
    public partial class SimpleExecuteScalarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SimpleExecuteScalarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    public delegate void SimpleExecuteScalarCompletedEventHandler(object sender, SimpleExecuteScalarCompletedEventArgs args);
    
    public partial class NextSeqValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NextSeqValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    public delegate void NextSeqValueCompletedEventHandler(object sender, NextSeqValueCompletedEventArgs args);
    
    public partial class GetGeneratorValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGeneratorValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void GetGeneratorValueCompletedEventHandler(object sender, GetGeneratorValueCompletedEventArgs args);
    
    public partial class GetDataSetSimpleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataSetSimpleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    public delegate void GetDataSetSimpleCompletedEventHandler(object sender, GetDataSetSimpleCompletedEventArgs args);
    
    public partial class GetDataSetByNameSimpleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataSetByNameSimpleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    public delegate void GetDataSetByNameSimpleCompletedEventHandler(object sender, GetDataSetByNameSimpleCompletedEventArgs args);
    
    public partial class GetChangesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetChangesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ServerCallResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServerCallResult)(this.results[0]));
            }
        }
    }
    
    public delegate void GetChangesCompletedEventHandler(object sender, GetChangesCompletedEventArgs args);
    
    public partial class ExecuteNonqueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteNonqueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ServerCallResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServerCallResult)(this.results[0]));
            }
        }
        
        public int affected {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    public delegate void ExecuteNonqueryCompletedEventHandler(object sender, ExecuteNonqueryCompletedEventArgs args);
    
    public partial class ExecuteScalarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteScalarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ServerCallResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServerCallResult)(this.results[0]));
            }
        }
        
        public object result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[1]));
            }
        }
    }
    
    public delegate void ExecuteScalarCompletedEventHandler(object sender, ExecuteScalarCompletedEventArgs args);
    
    public partial class GetDataSetBySqlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataSetBySqlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ServerCallResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServerCallResult)(this.results[0]));
            }
        }
        
        public System.Data.DataSet data {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[1]));
            }
        }
    }
    
    public delegate void GetDataSetBySqlCompletedEventHandler(object sender, GetDataSetBySqlCompletedEventArgs args);
    
    public partial class SaveDataSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveDataSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ServerCallResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServerCallResult)(this.results[0]));
            }
        }
        
        public int affected {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    public delegate void SaveDataSetCompletedEventHandler(object sender, SaveDataSetCompletedEventArgs args);
    
    public partial class RegisterListenerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterListenerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ServerCallResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServerCallResult)(this.results[0]));
            }
        }
        
        public int sink {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        public int security {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
    }
    
    public delegate void RegisterListenerCompletedEventHandler(object sender, RegisterListenerCompletedEventArgs args);
    
    public partial class UnregisterListenerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnregisterListenerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ServerCallResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServerCallResult)(this.results[0]));
            }
        }
    }
    
    public delegate void UnregisterListenerCompletedEventHandler(object sender, UnregisterListenerCompletedEventArgs args);
    
    public partial class GetDataSetByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataSetByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ServerCallResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServerCallResult)(this.results[0]));
            }
        }
        
        public System.Data.DataSet result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[1]));
            }
        }
    }
    
    public delegate void GetDataSetByNameCompletedEventHandler(object sender, GetDataSetByNameCompletedEventArgs args);
    
    public partial class GetTextResourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTextResourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void GetTextResourceCompletedEventHandler(object sender, GetTextResourceCompletedEventArgs args);
    
    public delegate void LogoutCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);
}
