"Name"			= 'ToolScript'
"Author"		= 'Pavel Lang'
"Version"		= 'v0.1'
"About"			= 'Tool scripting language'

"Case Sensitive"	= True

"Start Symbol"		= <Stm List>

! ------------------------------------------------- Sets

{ID Head}	= {Letter} + [_]
{ID Tail}	= {Alphanumeric} + [_]
{All Chars}	= {&1 .. &D7FF} + {&DC00 .. &FFEF}
{String Chars1}	= {All Chars} - ['']
{String Chars2}	= {All Chars} - ["\]
{HexNum}	= {Number} + [abcdef] + [ABCDEF]

! ------------------------------------------------- Terminals

ID				= {ID Head}{ID Tail}*
!QualifiedName	= ('global::')?{ID Head}{ID Tail}*('.'{ID Head}{ID Tail}*)+
!				| 'global::'{ID Head}{ID Tail}*


StringLiteral	= '' ( {String Chars1} | '''' )* ''
				| '"' ( {String Chars2} | '\' {Printable} )* '"'

IntLiteral		= {Number}+

DecimalLiteral	= {Digit}*'.'{Digit}+

! ------------------------------------------------- Rules

Comment Start = '/*'
Comment End   = '*/'
Comment Line  = '//'

! ===================================================================
! Statements
! ===================================================================

<QualifiedName>	::= ID '.' <QualifiedName>
				|	ID

<Stm>			::=	if '(' <Expr> ')' <Stm>
               	|	if '(' <Expr> ')' <Then Stm> else <Stm>         
               	|	while '(' <Expr> ')' <Stm> 
               	|	for '(' <Expr> ';' <Expr> ';' <Expr> ')' <Stm>
               	|	foreach '(' ID 'in' <Expr> ')' <Stm>
               	|	observed '(' <Expr> ')' <Stm>
               	|	using <QualifiedName> ';'			! import .NET nodule
               	|	using StringLiteral ';'				! open file
               	|	using <QualifiedName> 'as' ID ';'	! import .NET nodule
               	|	using StringLiteral 'as' ID ';'		! open file
               	|	using '(' <Expr> ')' <Stm>			! for IDisposable
               	|	<Normal Stm>

<Then Stm>   	::=	if '(' <Expr> ')' <Then Stm> else <Then Stm>
               	|	while '(' <Expr> ')' <Then Stm> 
               	|	for '(' <Expr> ';' <Expr> ';' <Expr> ')' <Then Stm>
               	|	<Normal Stm>

<Normal Stm> 	::=	do <Stm> while '(' <Expr> ')'
               	|	switch '(' <Expr> ')' '{' <Case Stms> '}'
               	|	<Block>
               	|	<Expr> ';'
               	|	break ';'
               	|	continue ';'
               	|	return <Expr> ';'
               	|	';'              !Null statement

<Func args>    	::=	<Func args> ',' <Func Arg>
				|	<Func Arg>
				|

<Func Arg>		::=	ID
				|	ID '=' <Expr>

<Args>       	::=	<Args> ',' <Arg>
				|	<Arg>
				|

<Arg>			::=	<Op If>
				|	ID '=' <Expr>

<Case Stms> 	::=	case <Value> ':' <Stm List> <Case Stms>
              	|	default ':' <Stm List>                  
              	|	

<Block>     	::=	'{' <Stm List> '}'

<Stm List>  	::=	<Stm> <Stm List>
              	| 

! ===================================================================
! Function support
! ===================================================================

<Function>		::=	'function' ID '(' <Func args> ')' <Stm>
				|	'function' '(' <Func args> ')' <Stm>

! ===================================================================
! Window support
! ===================================================================

<Window>		::=	'window' ID <WndParam List> <Layout Block>
				|	'window' <WndParam List> <Layout Block>

<WndParam List>	::=	<WndParam> <WndParam List>	! if switched shift-reduce
				|

<WndParam>		::= ID '=' <Expr> ';'

<Layout Block>	::= 'hbox'  <WndParam List> <Layout Block> 'end'
				|	'vbox'  <WndParam List> <Layout Block> 'end'
				|	'table' <WndParam List> <TabRow Block> 'end'
				|	'table' <WndParam List> <TabCol Block> 'end'
				|	<Menu Block>
				|	'ref' <QualifiedName> <WndParam List>
				|	'ref' StringLiteral <WndParam List>
				|	'[' <Expr> ']' <WndParam List>

<TabRow Block>	::=	'row' <WndParam List> <Tab Cells> 'end'
<TabCol Block>	::=	'column' <WndParam List> <Tab Cells> 'end'

<Tab Cells>		::= <Tab Cells> <Tab Cell>
				|

<Tab Cell>		::= <Layout Block>

<Menu Block>	::=	'menu' <WndParam List> <MenuItems List> 'end'

<MenuItems List> ::= <Menu Item> <MenuItems List>
				|

<Menu Item>		::= <Menu Block>
				|	'item' <WndParam List>
				|	'separator'

! ===================================================================
! Operator precedence
! ===================================================================

<Expr List>		::=	<Expr List> ',' <Expr>
				|	<Expr>

<Dict List>		::=	<Dict List> ',' <Expr> ':' <Expr>
				|	<Expr> ':' <Expr>

<Expr>			::=	<Op If> '='   <Expr>
				|	<Op If> '+='  <Expr>
				|	<Op If> '-='  <Expr>
				|	<Op If> '*='  <Expr>
				|	<Op If> '/='  <Expr>
				|	<Op If> '<==' <Expr>
				|	<Op If> '<==>' <Expr>
				|	<Op If>

<Op If>			::=	<Op Or> '?' <Op If> ':' <Op If>
				|	<Op Or>

<Op Or>			::=	<Op Or> 'or' <Op And>
				| 	<Op And>

<Op And>		::=	<Op And> 'and' <Op Equate>
				| 	<Op Equate>

<Op Equate>		::=	<Op Equate> '==' <Op Compare>
				| 	<Op Equate> '!=' <Op Compare>
				|	<Op Compare>

<Op Compare>	::=	<Op Compare> '<'  <Op In>
				|	<Op Compare> '>'  <Op In>
               	| 	<Op Compare> '<=' <Op In>
               	| 	<Op Compare> '>=' <Op In>
				| 	<Op In>

<Op In>			::=	<Op In> 'in' <Op Add>
				|	<Op In> 'in' '<' <Op Add> ',' <Op Add> '>'
				|	<Op In> 'in' '<' <Op Add> ',' <Op Add> ')'
				|	<Op In> 'in' '(' <Op Add> ',' <Op Add> '>'
				|	<Op In> 'in' '(' <Op Add> ',' <Op Add> ')'
				|	<Op Add>

<Op Add>     	::=	<Op Add> '+' <Op Mult>
               	| 	<Op Add> '-' <Op Mult>
               	| 	<Op Mult>

<Op Mult>    	::=	<Op Mult> '*' <Op Unary>
               	|	<Op Mult> '/' <Op Unary>
               	|	<Op Mult> '%' <Op Unary>
               	|	<Op Unary>

<Op Unary>   	::=	'not'  <Op Unary>
				|	'!'    <Op Unary>
               	| 	'-'    <Op Unary>
              	|	'cast' <Op Unary> 'as' <QualifiedName>
               	|	'++'   <Op Unary>
               	|	'--'   <Op Unary>
               	|	<Op Pointer> '++'
               	|	<Op Pointer> '--'
               	|	<Op Pointer> 'is' 'null'
               	|	<Op Pointer> 'not' 'null'
               	|	<Op Pointer> 'is' 'not' 'null'
               	| 	<Op Pointer>

<Op Pointer>	::=	<Op Pointer> '.' <Value>
				| 	<Op Pointer> '->' <Value>	! if not null, lookup value else return null - safe referencing
				| 	<Op Pointer> '[' <Expr> ']'
				| 	<Op Pointer> '(' <Args> ')' ! function call
				| 	<Value>

<Value>			::=	IntLiteral
				| 	StringLiteral
				|	DecimalLiteral
				|	'type' <QualifiedName>
				|	<Function>
				|	<Window>
				|	'new' <QualifiedName> '(' <Args> ')'
				|	ID
				|	'var' ID
				|	'static' ID
				|	'(' <Expr> ')'
				|	'[' <Expr List> ']'
				|	'{' <Dict List> '}'
				|	'null'
				|	'true'
				|	'false'


