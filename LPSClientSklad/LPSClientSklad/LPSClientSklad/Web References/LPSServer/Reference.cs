// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace LPSClientSklad.LPSServer {
    
    
    /// <remarks/>
    /// <remarks>
///LPSoft Sklad web service
///</remarks>
    [System.Web.Services.WebServiceBinding(Name="ServerSoap", Namespace="http://lpsoft.org/skladserver/")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MarshalByRefObject))]
    public partial class Server : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback PingOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteNonquerySimpleOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteNonqueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteScalarSimpleOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteScalarOperationCompleted;
        
        private System.Threading.SendOrPostCallback NextSeqValueOperationCompleted;
        
        public Server() {
            this.Url = "http://localhost:8080/Server.asmx";
        }
        
        public Server(string url) {
            this.Url = url;
        }
        
        public event PingCompletedEventHandler PingCompleted;
        
        public event LoginCompletedEventHandler LoginCompleted;
        
        public event LogoutCompletedEventHandler LogoutCompleted;
        
        public event ExecuteNonquerySimpleCompletedEventHandler ExecuteNonquerySimpleCompleted;
        
        public event ExecuteNonqueryCompletedEventHandler ExecuteNonqueryCompleted;
        
        public event ExecuteScalarSimpleCompletedEventHandler ExecuteScalarSimpleCompleted;
        
        public event ExecuteScalarCompletedEventHandler ExecuteScalarCompleted;
        
        public event NextSeqValueCompletedEventHandler NextSeqValueCompleted;
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/skladserver/Ping", RequestNamespace="http://lpsoft.org/skladserver/", ResponseNamespace="http://lpsoft.org/skladserver/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public bool Ping() {
            object[] results = this.Invoke("Ping", new object[0]);
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginPing(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Ping", new object[0], callback, asyncState);
        }
        
        public bool EndPing(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void PingAsync() {
            this.PingAsync(null);
        }
        
        public void PingAsync(object userState) {
            if ((this.PingOperationCompleted == null)) {
                this.PingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPingCompleted);
            }
            this.InvokeAsync("Ping", new object[0], this.PingOperationCompleted, userState);
        }
        
        private void OnPingCompleted(object arg) {
            if ((this.PingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PingCompleted(this, new PingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/skladserver/Login", RequestNamespace="http://lpsoft.org/skladserver/", ResponseNamespace="http://lpsoft.org/skladserver/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public bool Login(string login, string password) {
            object[] results = this.Invoke("Login", new object[] {
                        login,
                        password});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginLogin(string login, string password, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Login", new object[] {
                        login,
                        password}, callback, asyncState);
        }
        
        public bool EndLogin(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void LoginAsync(string login, string password) {
            this.LoginAsync(login, password, null);
        }
        
        public void LoginAsync(string login, string password, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        login,
                        password}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/skladserver/Logout", RequestNamespace="http://lpsoft.org/skladserver/", ResponseNamespace="http://lpsoft.org/skladserver/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public void Logout() {
            this.Invoke("Logout", new object[0]);
        }
        
        public System.IAsyncResult BeginLogout(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Logout", new object[0], callback, asyncState);
        }
        
        public void EndLogout(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        public void LogoutAsync() {
            this.LogoutAsync(null);
        }
        
        public void LogoutAsync(object userState) {
            if ((this.LogoutOperationCompleted == null)) {
                this.LogoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogoutCompleted);
            }
            this.InvokeAsync("Logout", new object[0], this.LogoutOperationCompleted, userState);
        }
        
        private void OnLogoutCompleted(object arg) {
            if ((this.LogoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogoutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/skladserver/ExecuteNonquerySimple", RequestNamespace="http://lpsoft.org/skladserver/", ResponseNamespace="http://lpsoft.org/skladserver/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public int ExecuteNonquerySimple(string sql) {
            object[] results = this.Invoke("ExecuteNonquerySimple", new object[] {
                        sql});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BeginExecuteNonquerySimple(string sql, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteNonquerySimple", new object[] {
                        sql}, callback, asyncState);
        }
        
        public int EndExecuteNonquerySimple(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void ExecuteNonquerySimpleAsync(string sql) {
            this.ExecuteNonquerySimpleAsync(sql, null);
        }
        
        public void ExecuteNonquerySimpleAsync(string sql, object userState) {
            if ((this.ExecuteNonquerySimpleOperationCompleted == null)) {
                this.ExecuteNonquerySimpleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteNonquerySimpleCompleted);
            }
            this.InvokeAsync("ExecuteNonquerySimple", new object[] {
                        sql}, this.ExecuteNonquerySimpleOperationCompleted, userState);
        }
        
        private void OnExecuteNonquerySimpleCompleted(object arg) {
            if ((this.ExecuteNonquerySimpleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteNonquerySimpleCompleted(this, new ExecuteNonquerySimpleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/skladserver/ExecuteNonquery", RequestNamespace="http://lpsoft.org/skladserver/", ResponseNamespace="http://lpsoft.org/skladserver/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public int ExecuteNonquery(string sql, NpgsqlParameter[] parameters) {
            object[] results = this.Invoke("ExecuteNonquery", new object[] {
                        sql,
                        parameters});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BeginExecuteNonquery(string sql, NpgsqlParameter[] parameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteNonquery", new object[] {
                        sql,
                        parameters}, callback, asyncState);
        }
        
        public int EndExecuteNonquery(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void ExecuteNonqueryAsync(string sql, NpgsqlParameter[] parameters) {
            this.ExecuteNonqueryAsync(sql, parameters, null);
        }
        
        public void ExecuteNonqueryAsync(string sql, NpgsqlParameter[] parameters, object userState) {
            if ((this.ExecuteNonqueryOperationCompleted == null)) {
                this.ExecuteNonqueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteNonqueryCompleted);
            }
            this.InvokeAsync("ExecuteNonquery", new object[] {
                        sql,
                        parameters}, this.ExecuteNonqueryOperationCompleted, userState);
        }
        
        private void OnExecuteNonqueryCompleted(object arg) {
            if ((this.ExecuteNonqueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteNonqueryCompleted(this, new ExecuteNonqueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/skladserver/ExecuteScalarSimple", RequestNamespace="http://lpsoft.org/skladserver/", ResponseNamespace="http://lpsoft.org/skladserver/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public object ExecuteScalarSimple(string sql) {
            object[] results = this.Invoke("ExecuteScalarSimple", new object[] {
                        sql});
            return ((object)(results[0]));
        }
        
        public System.IAsyncResult BeginExecuteScalarSimple(string sql, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteScalarSimple", new object[] {
                        sql}, callback, asyncState);
        }
        
        public object EndExecuteScalarSimple(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((object)(results[0]));
        }
        
        public void ExecuteScalarSimpleAsync(string sql) {
            this.ExecuteScalarSimpleAsync(sql, null);
        }
        
        public void ExecuteScalarSimpleAsync(string sql, object userState) {
            if ((this.ExecuteScalarSimpleOperationCompleted == null)) {
                this.ExecuteScalarSimpleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteScalarSimpleCompleted);
            }
            this.InvokeAsync("ExecuteScalarSimple", new object[] {
                        sql}, this.ExecuteScalarSimpleOperationCompleted, userState);
        }
        
        private void OnExecuteScalarSimpleCompleted(object arg) {
            if ((this.ExecuteScalarSimpleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteScalarSimpleCompleted(this, new ExecuteScalarSimpleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/skladserver/ExecuteScalar", RequestNamespace="http://lpsoft.org/skladserver/", ResponseNamespace="http://lpsoft.org/skladserver/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public object ExecuteScalar(string sql, NpgsqlParameter[] parameters) {
            object[] results = this.Invoke("ExecuteScalar", new object[] {
                        sql,
                        parameters});
            return ((object)(results[0]));
        }
        
        public System.IAsyncResult BeginExecuteScalar(string sql, NpgsqlParameter[] parameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteScalar", new object[] {
                        sql,
                        parameters}, callback, asyncState);
        }
        
        public object EndExecuteScalar(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((object)(results[0]));
        }
        
        public void ExecuteScalarAsync(string sql, NpgsqlParameter[] parameters) {
            this.ExecuteScalarAsync(sql, parameters, null);
        }
        
        public void ExecuteScalarAsync(string sql, NpgsqlParameter[] parameters, object userState) {
            if ((this.ExecuteScalarOperationCompleted == null)) {
                this.ExecuteScalarOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteScalarCompleted);
            }
            this.InvokeAsync("ExecuteScalar", new object[] {
                        sql,
                        parameters}, this.ExecuteScalarOperationCompleted, userState);
        }
        
        private void OnExecuteScalarCompleted(object arg) {
            if ((this.ExecuteScalarCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteScalarCompleted(this, new ExecuteScalarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lpsoft.org/skladserver/NextSeqValue", RequestNamespace="http://lpsoft.org/skladserver/", ResponseNamespace="http://lpsoft.org/skladserver/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public long NextSeqValue(string generator) {
            object[] results = this.Invoke("NextSeqValue", new object[] {
                        generator});
            return ((long)(results[0]));
        }
        
        public System.IAsyncResult BeginNextSeqValue(string generator, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("NextSeqValue", new object[] {
                        generator}, callback, asyncState);
        }
        
        public long EndNextSeqValue(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((long)(results[0]));
        }
        
        public void NextSeqValueAsync(string generator) {
            this.NextSeqValueAsync(generator, null);
        }
        
        public void NextSeqValueAsync(string generator, object userState) {
            if ((this.NextSeqValueOperationCompleted == null)) {
                this.NextSeqValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNextSeqValueCompleted);
            }
            this.InvokeAsync("NextSeqValue", new object[] {
                        generator}, this.NextSeqValueOperationCompleted, userState);
        }
        
        private void OnNextSeqValueCompleted(object arg) {
            if ((this.NextSeqValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NextSeqValueCompleted(this, new NextSeqValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://lpsoft.org/skladserver/")]
    public partial class NpgsqlParameter : MarshalByRefObject {
        
        /// <remarks/>
        [System.ComponentModel.DefaultValue(0)]
        public byte Precision;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool PrecisionSpecified;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValue(0)]
        public byte Scale;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool ScaleSpecified;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValue(0)]
        public int Size;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool SizeSpecified;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValue(DbType.String)]
        public DbType DbType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool DbTypeSpecified;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValue(NpgsqlDbType.Text)]
        public NpgsqlDbType NpgsqlDbType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool NpgsqlDbTypeSpecified;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValue(ParameterDirection.Input)]
        public ParameterDirection Direction;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool DirectionSpecified;
        
        /// <remarks/>
        public bool IsNullable;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValue("")]
        public string ParameterName;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValue("")]
        public string SourceColumn;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValue(DataRowVersion.Current)]
        public DataRowVersion SourceVersion;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool SourceVersionSpecified;
        
        /// <remarks/>
        public object Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://lpsoft.org/skladserver/")]
    public enum DbType {
        
        /// <remarks/>
        AnsiString,
        
        /// <remarks/>
        Binary,
        
        /// <remarks/>
        Byte,
        
        /// <remarks/>
        Boolean,
        
        /// <remarks/>
        Currency,
        
        /// <remarks/>
        Date,
        
        /// <remarks/>
        DateTime,
        
        /// <remarks/>
        Decimal,
        
        /// <remarks/>
        Double,
        
        /// <remarks/>
        Guid,
        
        /// <remarks/>
        Int16,
        
        /// <remarks/>
        Int32,
        
        /// <remarks/>
        Int64,
        
        /// <remarks/>
        Object,
        
        /// <remarks/>
        SByte,
        
        /// <remarks/>
        Single,
        
        /// <remarks/>
        String,
        
        /// <remarks/>
        Time,
        
        /// <remarks/>
        UInt16,
        
        /// <remarks/>
        UInt32,
        
        /// <remarks/>
        UInt64,
        
        /// <remarks/>
        VarNumeric,
        
        /// <remarks/>
        AnsiStringFixedLength,
        
        /// <remarks/>
        StringFixedLength,
        
        /// <remarks/>
        Xml,
        
        /// <remarks/>
        DateTime2,
        
        /// <remarks/>
        DateTimeOffset,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://lpsoft.org/skladserver/")]
    public enum NpgsqlDbType {
        
        /// <remarks/>
        Bigint,
        
        /// <remarks/>
        Boolean,
        
        /// <remarks/>
        Box,
        
        /// <remarks/>
        Bytea,
        
        /// <remarks/>
        Circle,
        
        /// <remarks/>
        Char,
        
        /// <remarks/>
        Date,
        
        /// <remarks/>
        Double,
        
        /// <remarks/>
        Integer,
        
        /// <remarks/>
        Line,
        
        /// <remarks/>
        LSeg,
        
        /// <remarks/>
        Money,
        
        /// <remarks/>
        Numeric,
        
        /// <remarks/>
        Path,
        
        /// <remarks/>
        Point,
        
        /// <remarks/>
        Polygon,
        
        /// <remarks/>
        Real,
        
        /// <remarks/>
        Smallint,
        
        /// <remarks/>
        Text,
        
        /// <remarks/>
        Time,
        
        /// <remarks/>
        Timestamp,
        
        /// <remarks/>
        Varchar,
        
        /// <remarks/>
        Refcursor,
        
        /// <remarks/>
        Inet,
        
        /// <remarks/>
        Bit,
        
        /// <remarks/>
        TimestampTZ,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://lpsoft.org/skladserver/")]
    public enum ParameterDirection {
        
        /// <remarks/>
        Input,
        
        /// <remarks/>
        Output,
        
        /// <remarks/>
        InputOutput,
        
        /// <remarks/>
        ReturnValue,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://lpsoft.org/skladserver/")]
    public enum DataRowVersion {
        
        /// <remarks/>
        Original,
        
        /// <remarks/>
        Current,
        
        /// <remarks/>
        Proposed,
        
        /// <remarks/>
        Default,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://lpsoft.org/skladserver/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NpgsqlParameter))]
    public partial class MarshalByRefObject {
    }
    
    public partial class PingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void PingCompletedEventHandler(object sender, PingCompletedEventArgs args);
    
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs args);
    
    public delegate void LogoutCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);
    
    public partial class ExecuteNonquerySimpleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteNonquerySimpleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void ExecuteNonquerySimpleCompletedEventHandler(object sender, ExecuteNonquerySimpleCompletedEventArgs args);
    
    public partial class ExecuteNonqueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteNonqueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void ExecuteNonqueryCompletedEventHandler(object sender, ExecuteNonqueryCompletedEventArgs args);
    
    public partial class ExecuteScalarSimpleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteScalarSimpleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    public delegate void ExecuteScalarSimpleCompletedEventHandler(object sender, ExecuteScalarSimpleCompletedEventArgs args);
    
    public partial class ExecuteScalarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteScalarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    public delegate void ExecuteScalarCompletedEventHandler(object sender, ExecuteScalarCompletedEventArgs args);
    
    public partial class NextSeqValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NextSeqValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    public delegate void NextSeqValueCompletedEventHandler(object sender, NextSeqValueCompletedEventArgs args);
}
